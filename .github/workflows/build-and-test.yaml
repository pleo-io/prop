# THIS CODE WAS AUTOGENERATED. DO NOT MODIFY THIS FILE DIRECTLY
# THE SOURCE CODE LIVES IN A DIFFERENT REPOSITORY:
#   - centralized-templates
# FILE STEWARD: @pleo-io/devexp

name: Build & Test
on: push

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  # Only cancel previous runs unless on 'defaultBranch' (which is set in template configuration).
  # defaultBranch is set to: 'master'.
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.2.0

        # Login to AWS for fetching CI/CD cache.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CICD_S3_CACHE }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CICD_S3_CACHE }}
          aws-region: eu-west-1

        # Check whether the current code has already been run in CI/CD.
      - name: Check CI/CD cache
        uses: pleo-oss/s3-cache-action@v2.0.1
        id: s3-cache
        with:
          bucket-name: pleo-cicd-s3-cache
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CICD_S3_CACHE }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CICD_S3_CACHE }}
          aws-region: eu-west-1

        # Set up a JDK environment for building, testing and releasing.
      - name: Set up JDK 17
        uses: actions/setup-java@v3.9.0
        with:
          java-version: 17.0.4
          distribution: temurin

      # Allow caching Gradle executions to further speed up CI/CD steps invoking Gradle.
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.3
        with:
          gradle-executable: ./gradlew
          gradle-version: wrapper
          cache-read-only: true

        # Check whether the project builds.
      - name: Gradle Build
        run: ./gradlew build -x test
        env:
          GRADLE_USER: ${{ secrets.GITHUB_ACTOR }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}

      - name: Run Unit Tests
        if: steps.s3-cache.outputs.processed == 'false'
        run: ./gradlew check
        env:
          GRADLE_USER: ${{ secrets.GITHUB_ACTOR }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}

      - name: Publish Unit Tests report to GitHub
        if: steps.s3-cache.outputs.processed == 'false'
        uses: mikepenz/action-junit-report@v3.5.0
        with:
          check_name: Unit Tests report
          report_paths: "**/build/test-results/test/TEST-*.xml"

      - name: Generate aggregated code coverage report
        if: steps.s3-cache.outputs.processed == 'false'
        run: ./gradlew jacocoAggregateReport
        env:
          GRADLE_USER: ${{ secrets.GITHUB_ACTOR }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}

      - name: Publish code coverage report to Coveralls
        if: steps.s3-cache.outputs.processed == 'false'
        continue-on-error: true
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: ./gradlew :coverallsJacoco
