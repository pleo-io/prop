# THIS CODE WAS AUTOGENERATED. DO NOT MODIFY THIS FILE DIRECTLY
# THE SOURCE CODE LIVES IN A DIFFERENT REPOSITORY:
#   - centralized-templates
# FILE STEWARD: @pleo-io/devexp

name: Run vulnerability scan

on:
  push:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  setupGo: false
  jdkVersion: 17
  sendOpsLevelVulnerabilityCheck: true

jobs:
  snyk:
    name: Snyk
    runs-on: [self-hosted, universal]

    env:
      default_snyk_args: --all-projects --prune-repeated-subdependencies --policy-path=.snyk

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.0.2

      # Generate relevant environment variables for conditions.
      - name: Environment standardization
        run: |
          default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d ' ' -f 5)
          echo "default_branch=${default_branch}" >> $GITHUB_ENV
          default_branch_ref="refs/heads/${default_branch}"
          echo "default_branch_ref=${default_branch_ref}" >> $GITHUB_ENV
          repo="${{ github.event.repository.name }}"
          echo "repo=${repo}" >> $GITHUB_ENV

      # Ensures that Snyk executes within the expected Java environment.
      - name: Set up JDK
        if: env.jdkVersion != ''
        uses: actions/setup-java@v3.5.1
        with:
          java-version: ${{ env.jdkVersion }}
          distribution: temurin

      # Ensures that Snyk executes within the expected Go environment.
      - name: Setup go
        if: env.setupGo == 'true'
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.mod
          cache: true

      - name: Configure snyk
        run: |
          npx snyk auth ${{ secrets.SNYK_TOKEN }}
          npx snyk config set org=pleo

      - name: Test (patched production vulnerabilities)
        if: github.ref != env.default_branch_ref
        run: |
          EXIT_CODE=0
          npx snyk test ${{ env.default_snyk_args }} --fail-on=all || EXIT_CODE=$?
          if [[ $EXIT_CODE -eq 2 ]]; then
            echo "Initial attempt at testing production dependencies failed. Retrying"
            npx snyk test ${{ env.default_snyk_args }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}

      - name: Test (patched development vulnerabilities)
        if: github.ref != env.default_branch_ref
        run: |
          EXIT_CODE=0
          npx snyk test ${{ env.default_snyk_args }} --fail-on=all --dev --severity-threshold=high || EXIT_CODE=$?
          if [[ $EXIT_CODE -eq 2 ]]; then
            echo "Initial attempt at testing development dependencies failed. Retrying"
            npx snyk test ${{ env.default_snyk_args }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}

      - name: Test (critical patched/unpatched vulnerabilities)
        if: github.ref != env.default_branch_ref
        run: |
          EXIT_CODE=0
          npx snyk test ${{ env.default_snyk_args }} --severity-threshold=critical || EXIT_CODE=$?
          if [[ $EXIT_CODE -eq 2 ]]; then
            echo "Initial attempt at testing production dependencies failed. Retrying"
            npx snyk test ${{ env.default_snyk_args }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}

      - name: Monitor
        if: github.ref == env.default_branch_ref
        continue-on-error: true
        run: npx snyk monitor ${{ env.default_snyk_args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}

      - name: Send result to OpsLevel
        if: env.sendOpsLevelVulnerabilityCheck == 'true' && github.ref == env.default_branch_ref
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          # Runs snyk test and if fails with code 2 attempts again
          # After that then it filters snyk json payload to remove duplicate vulnerabilities among projects to avoid hitting OpsLevel limit of 2MB
        run: |
          set +e

          EXIT_CODE=2
          MAX_ATTEMPTS=3
          n=0

          until [[ $n -ge $MAX_ATTEMPTS || $EXIT_CODE -ne 2 ]]; do
            echo "Running Snyk test. Attempt $((n + 1))"

            SNYK_RESULT=$(npx snyk test ${{ env.default_snyk_args }} --json)
            EXIT_CODE=$?
            n=$((n+1))

            if [[ $n -lt $MAX_ATTEMPTS && $EXIT_CODE -eq 2 ]]; then
              echo "Sleeping 5 seconds before attempting again..."
              sleep 5
            fi
          done

          # Check for failure
          if [[ $EXIT_CODE -ge 2 ]]; then
            echo "Finished with failure code $EXIT_CODE"
            exit $EXIT_CODE
          fi

          set -e

          JQ_FILTER="if type == \"array\" then . else [.] end | {
              projectName: .[0].projectName,
              vulnerabilities: [.[] | .vulnerabilities[]?] | unique_by(.id),
              displayTargetFiles: [.[] | .displayTargetFile], 
              org: .[0].org,
              ignoredVulnerabilities: [.[] | .filtered.ignore[]?] | unique_by(.id)
          }"

          # Send event to Opslevel
          echo "$SNYK_RESULT" | jq "$JQ_FILTER" | curl --retry 5 \
            --retry-delay 0 \
            --max-time 10 \
            --retry-max-time 80 \
            -X POST ${{ secrets.OPSLEVEL_SNYK_CHECK_URL }} \
            -H 'content-type: application/json' \
            --data-binary @-
