
buildscript {
    repositories {
        repositories {
            mavenLocal()
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
            google()
        }
    }

    dependencies {
        classpath(libs.kotlin.gradle.plugin)
        classpath(libs.kotlinter.gradle)
    }
}

plugins {
    alias(libs.plugins.kotlin.jvm) apply false
    id 'jacoco'
    alias(libs.plugins.coveralls.jacoco) apply false
    alias(libs.plugins.jacocolog) apply false
    alias(libs.plugins.jmailen.kotlinter)
}

allprojects {
    group = 'io.pleo'

    apply plugin: libs.plugins.coveralls.jacoco.get().pluginId
    apply plugin: libs.plugins.jacocolog.get().pluginId

    jacoco {
        toolVersion = "0.8.7"
    }

    tasks.named("jacocoLogAggregatedCoverage") {
        enabled = false
    }

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: libs.plugins.java.library.get().pluginId
    apply plugin: libs.plugins.kotlin.library.get().pluginId
    apply plugin: libs.plugins.maven.publish.get().pluginId
    apply plugin: libs.plugins.jmailen.kotlinter.get().pluginId

    sourceCompatibility = 17
    targetCompatibility = 17

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = "17"
            javaParameters = true
            languageVersion = "1.6"
        }
    }

    dependencies {
        implementation(libs.slf4j)
        implementation(libs.kotlin.reflect)
        implementation(libs.kotlin.guice)

        testImplementation(libs.google.truth)
        testImplementation(libs.logback.classic)
        testImplementation(libs.junit.jupiter)
        testImplementation(libs.mockk)

        testRuntimeOnly(libs.junit.jupiter.engine)
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    tasks.named('check') {
        finalizedBy 'formatKotlin'
    }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = project.name
                    description = "Dynamic properties for your Java/Kotlin app"
                    url = 'http://github.com/pleo-io/prop'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            name = 'Pleo'
                            email = 'dev@pleo.io'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:pleo-io/prop.git'
                        developerConnection = 'scm:git:git@github.com:pleo-io/prop.git'
                        url = 'https://github.com/pleo-io/prop'
                    }
                }
            }
        }

        repositories {
            mavenLocal()
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/pleo-io/prop")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

ext.generateVersion = { ->
    def updateMode = properties.get("mode") ?: "internal"
    def splitVersionStrings = version.toString().split("[.]")
    def (major, minor, patch) = splitVersionStrings.collect{Integer.parseInt(it)}
    switch (updateMode) {
        case "major": major++; minor = 0; patch = 0; break
        case "minor": minor++; patch = 0; break
        case "patch": patch++; break
    }
    "$major.$minor.$patch"
}

tasks.register("incrementVersion") {
    group = "release"
    description = "Increments the version in this build file everywhere it is used."

    doLast {
        def propertiesReference = new Properties()
        def propertiesFile = file("gradle.properties")

        def newVersion = properties.get("overrideVersion") ?: generateVersion()
        propertiesReference.load(propertiesFile.newDataInputStream())
        propertiesReference.setProperty("version", newVersion)
        propertiesReference.store(propertiesFile.newWriter(), null)
    }
}

// Executed only at root level so code coverage is only reported once to Coveralls
coverallsJacoco {
    reportPath = "build/reports/jacoco/jacocoAggregatedReport/jacocoAggregatedReport.xml"
    reportSourceSets += subprojects.sourceSets.main.allSource.srcDirs.flatten()
}

tasks.named('coverallsJacoco') {
    dependsOn jacocoAggregatedReport
}
